NAME:

PSHELL - Process Specific Embedded Command Line Shell

INTRODUCTION:

This package contains all the necessary code, documentation and examples for
building C/C++ applications that incorporate a Process Specific Embedded
Command Line Shell (PSHELL).  The PSHELL library provides a simple, lightweight,
framework and API to embed functions within a C/C++ application that can be
invoked either via a separate client program or directly from the within application
itself.  The signature for the embedded functions are identical to the 'main' in
'C' as follows:

int myFunc(int argc, char *argv[]);

These functions can be invoked in several ways depending on how the internal
PSHELL server is configured.  The following shows the various PSHELL server
types along with their associated invokation method:

TCP Server   : Uses standard 'telnet' client to invoke functions
UDP Server   : Uses included 'pshell' client to invoke functions
UNIX Server  : Uses included 'pshell' client to invoke functions
LOCAL Server : No client program needed, functions invoked directly
               from within application itself

The functions are dispatched via its registered command name (keyword), along
with 0 or more command line arguments, similar to command line shell processing.

There is also a control mechanism API provided by where any external program
can make calls into another program that is running a PSHELL that is configured
for a UDP or UNIX server.

GETTING STARTED:

This package consists of one library (4 versions), one stand-alone UDP/UNIX
client application (pshell), three utility shell scripts, one expect script, one
build script and one demo program.  The rest of this README will assume
that this package has been unzipped with the current directory structure
preserved.  It is understood that not all installations will follow this
directory scheme.  Environment variables and the buildPshell, setPshellLib
and showPshellLib shell scripts will need to be modified accordingly for a
different install directory scheme.

The following lists all the pieces of this package along with a brief description:

  1.  libpshell-full.a      -- Full version of libpshell server library (static)
  2.  libpshell-full.so     -- Full version of libpshell server library (shared)
  3.  libpshell-stub.a      -- Stub version of libpshell server library (static)
  4.  libpshell-stub.so     -- Stub version of libpshell server library (shared)
  5   libpshell-control.so  -- External program control library (shared)
  6   libpshell-control.a   -- External program control library (static)
  7.  pshell                -- Stand-alone PSHELL UDP/UNIX client remote access program
  8.  pshell.exp            -- Expect script to provide interface similar to UDP/UNIX
                               pshell client when using the TCP server with a telnet client
  9.  buildPshell           -- Shell script to build the entire package or individual pieces
  10. archivePshell         -- Shell script to creates a pshell-vX.Y.tar.gz archive of the
                               install directory
  11. setPshellLib          -- Shell script to set the libpshell.so softlink to desired library
  12. showPshelllLib        -- Shell script to show the current libpshell.so softlink setting
  13. pshellServerDemo      -- Demo application using the pshell server library features
  14. pshellControlDemo     -- Demo application using the pshell control library features
  15. traceFilterDemo       -- Demo application using the optional trace filter feature of
                               the pshell server library

ENVIRONMENT:

Setup the following environment variables in your shell startup script
and re-scource the script, examples given for the bash shell:

export PSHELL_INSTALL=<myInstallDir>
export PSHELL_BATCH_DIR=$PSHELL_INSTALL/batch
export PSHELL_CONFIG_DIR=$PSHELL_INSTALL/config
export PATH=$PSHELL_INSTALL/bin:$PSHELL_INSTALL/utils:$PATH
export MANPATH=$PSHELL_INSTALL/man:$MANPATH
export LD_LIBRARY_PATH=$PSHELL_INSTALL/lib:$LD_LIBRARY_PATH

DOCUMENTATION:

The following manpages are available from the above configured MANPATH:

pshell(1)          - Described the framework as well as the client programs
PshellServer(3C)   - Describes the API and usage of the PshellServer
PshellControl(3C)  - Describes the API and usage of the PshellControl
TraceFilter(3C)    - Described the API and usage of the TraceFilter

BUILDING:

This package includes binaries and libraries that were built and tested on
CentOS Linux 6.6.  They should be able to run on any modern Linux distribution
as is.  However, if a build is necessary, a shell based build script is provided.
A standard Makefile was not included since this package is not meant as a
stand-alone installed package but rather is meant to be included in other
software applications.  

The following is the usage of the build script:

Usage: buildPshell {-all | -pshell | -lib | -demo} [-readline] [-clean]

  where:
    all      - build all components of the pshell package
    pshell   - build the pshell UDP/UNIX stand-alone client program only
    lib      - build the pshell link libraries only (shared, static and stub)
    demo     - build the pshell stand-alone demo programs only
    readline - build the with the readline development and link libraries
    clean    - remove all old binaries and libraries

NOTE: Use the -readline build option if your build environment supports the
      GNU readline library development package, also note that readline also
      has a dependency with the curses (ncurses) library.  The current binaries
      and libraries were all compiled with the -readline flag.  

COMPILE OPTIONS:

The following lists all the compile time options available for both the
pshell client program and the PshellServer common library.  These flags need
to be manually added/removed from the buildPshell script as deemed necessary.
In most cases the defaults can be used and the flags don't need to be modified.

  PSHELL_CONFIG_DIR: for PshellServer, PshellClient, and PshellControl

    This is the default directory that contains the pshell-server.conf,
    pshell-control.conf, and pshell-client.conf files.  If this env variable
    is not set, it will use the default directory that is setup in the
    PshellServer.c, PshellControl.c,and PshellClient.c files (/etc). These
    config files can be used to set various server, client, and control settings.
    Refer to the example files in the 'config' directory of this package for
    usage of these files.
    
  VSNPRINTF: for PshellServer (-lib build switch)

    Some versions of the standard 'C' library do not support the
    function "vsnprintf".  This function is used in the "pshell_printf"
    function to format and populate the PSHELL transfer buffer and to
    detect for buffer overflow.  If this function is not available,
    the function "vsprintf" is used in its place.  Since vsprintf does
    not support the "n" argument, we need empirically detect a potential
    buffer overflow condition with a guardband mechanism, which is described
    below.  This flag is defined by default in the build script.

  PSHELL_PAYLOAD_CHUNK: for PshellServer (-lib build switch)

    This is the initial size in bytes for the payload of the pshell
    transfer message.  It is also the size the buffer will grow by
    in the event of a buffer overflow if we are specified to grow
    in chunks, see the previous flag.  The default value is 4000.

  PSHELL_PAYLOAD_GUARDBAND: for PshellServer (-lib build switch)

    This is the guardband used to detect a transfer buffer overflow
    when using "vsprintf" to format and populate the buffer.  This
    value should be smaller than the PSHELL_PAYLOAD_CHUNK size but
    larger than the maximum expected data size for any given SINGLE
    "pshell_printf" function call.  The default value for this is 400
    (bytes).

  PSHELL_GROW_PAYLOAD_IN_CHUNKS: for PshellServer (-lib build switch)

    When set, it will grow the payload of the PSHELL transfer buffer
    in the specified PSHELL_PAYLOAD_CHUNK size upon a buffer overflow.
    If NOT set it will have two different behavours, depending on
    whether the VSNPRINTF flag is set or not, these are as follows:

    VSPRINTF defined: Grow the payload in the EXACT amount needed to
    accomidate the current overflow condition.  Note that this will
    only work if the PshellServer is built with glibc2.1, if it is
    built with glibc2.0, it will grow in chunks, regardless of the
    setting of this flag.

    VSNPRINTF NOT defined: This will cause the contents of the buffer
    to be flushed over the socket on a detected buffer overflow.

  PSHELL_TOKEN_LIST_CHUNK: for PshellServer (-lib build switch)

    This is the amount we will grow our Tokens list by in the event
    we need more tokens, a new Tokens list is potentially created by
    each pshell_tokenize call as necessary, Tokens lists are reused
    for each callback function, this is how command line arguments are
    parsed.  The default is 10 if no value is specified for this flag.

  PSHELL_TOKEN_CHUNK: for PshellServer (-lib build switch)

    This is the amount we will grow our list of tokens by in the
    event we need more tokens for a given pshell_tokenize call, token
    entries are reused for each callback function.  The default is
    10 if no value is specified for this flag.

  PSHELL_COMMAND_CHUNK: for PshellServer (-lib build switch)

    This is the initial size in number of entries for the command
    table list.  It is also the chunk size to grow by in the event of
    overflow.  The command table list is used to contain information
    on all registered commands.  The default is 50 if no value is
    specified for this flag.

  PSHELL_COPY_ADD_COMMAND_STRINGS: for PshellServer (-lib build switch)

    This flag will tell the pshell_addCommand function to make a copy of
    (i.e. clone) the command, usage, and description strings.  This flag
    should be set if there is any chance that those strings will go out
    of scope at any time after the addCommand call.  If this flag is not
    set, the pointers to these strings will be used as-is for the command's
    command table entry.

  PSHELL_INCLUDE_COMMAND_IN_ARGS_LIST: for PshellServer (-lib build switch)

    This flag is used to make the argc/argv interface into the pshell callback
    functions behave in EXACTLY the same as the argc/argv in a 'C' "main".
    That is, the actual command itself will be included in the argc argument
    count and argv[0] will be the actual command.  If not set, argc/argv will
    ONLY include the actual arguments typed after the command.

  NOTE: For minimal memory usage, set the PSHELL_PAYLOAD_CHUNK to a fairly
        modest value (it's been tested with a value as low as 20 when using
        the VSNPRINTF compile flag) and do NOT set the PSHELL_GROW_PAYLOAD_IN_CHUNKS
        flag (i.e. grow exact or flush on overflow, depending on whether VSNPRINTF
        is defined).  Set all the other "CHUNK" sizes to 1, and do not set the
        PSHELL_COPY_ADD_COMMAND_STRINGS flag.

  TF_FAST_FILENAME_LOOKUP: for TraceFilter and application  (-lib & -demo build switch)

    This flag specifies whether to use fast filename lookup just using a quick
    pointer compare rather than a full "strcmp".  When using this flag every file
    needs to have the macro 'TF_SYMBOL_TABLE' placed at the top of the file,
    typically right after all the include directives.  This will preclude file
    filtering on '.h' files.

  TF_MAX_TRACE_SYMBOLS: for TraceFilter and application  (-lib & -demo build switch)

    If the TF_FAST_FILENAME_LOOKUP flag is set, this value specifies the max number
    of files in the filename symbol table, if not specified defaults to 5000

  TF_MAX_LINE_FILTERS: for TraceFilter (-lib build switch)

    Specifies the max number of line specifications (not lines) that can be placed
    in a file filter, defaults to 50

  TF_MAX_FILE_FILTERS: for TraceFilter (-lib build switch)

    Specifies the maximum number of files that can have an active filter, defaults
    to 500

  TF_MAX_FUNCTION_FILTERS: for TraceFilter (-lib build switch)

    Specifies the maximum number of functions that can have an active filter,
    defaults to 500

  TF_MAX_THREAD_FILTERS: for TraceFilter (-lib build switch)

    Specifies the maximum number of threads that can be registered and have
    an active filter, defaults to 100

  TF_NATIVE_DISCRETE_LEVELS: for TraceFilter (-lib build switch)

    Specifies whether the existing trace logging system uses a discrete or
    hierarchical level specification, if hierarchical, then those hierarchies
    must be mapped to corresponding discrete levels with corresponding bitmap
    masks

  TF_USE_COLORS: for TraceFilter (-lib build switch)

    Specifies whether to use colors for the 'ON/OFF/NONE' identifiers for the
    "trace show config" command and for the highlighting of the found substrings
    for the "trace show symbols" command

EXECUTION:

To run the demo programs and any associated client programs, run "pshellServerDemo"
and connect to it with the "pshell" client program (for the UDP/UNIX server) or
telnet or the pshell.exp telnet expect script wrapper (for the TCP server).  Note, to
use the "pshell.exp" expect script you need to have "expect" installed on your host in
/usr/bin.

(NOTE: To see the features of the dynamically configurable optional TraceFilter
mechanism, run the program "traceFilterDemo".  It can be controlled via the same
command line 'pshell' or 'telnet' client as "pshellServerDemo", so all following
usage descriptions also apply to that)

The usage of the "pshellServerDemo" program is as follows:

$ pshellServerDemo -h

Usage: pshellServerDemo -udp | -unix | -tcp | -local

  where:
    -udp   - Multi-session UDP server
    -unix  - Multi-session UNIX server
    -tcp   - Single session TCP server
    -local - Local command dispatching server

Execute "pshellServerDemo -udp" or "pshellServerDemo -unix" at the command line,
either in the foreground or background.  You can now interact with the pshellServerDemo
program via the "pshell" client program.  Note, you can also run the "pshellServerDemo"
program with the "-tcp" option and connect with the expect script "pshell.exp" which
wraps a telnet session to make the look and feel be similar to the UDP/UNIX "pshell" client
program.  The usage of the "pshell.exp" script is the same as the "pshell" UDP/UNIX client
program shown below with the exception of the "-t <timeout>" option and the "batch" interactive
command not being supported.  Also note that the TCP server is a single session server with a
10 minute idle session timeout, whereas the UDP/UNIX server is a multi-session server with no
idle session timeout.  Conversly, you can also connect to the TCP server by using telnet
directly (i.e. "telnet localhost 6001") instead of the "pshell.exp" expect script telnet
wrapper.

The usage of the "pshell" and "pshell.exp" (see NOTE) command line client programs
are as follows:

Usage: pshell -h | ? | -s | [-t<timeout>] {<hostName> | <ipAddress> | unix} {<serverName> | <portNum>}
               [-h | ? | {<command> [<rate> [clear]]} | {-f <fileName> [<rate> [clear]]}]

  where:

    -h,?       - show pshell usage or command set of specified PSHELL server
    -s         - show named servers in $PSHELL_CONFIG_DIR/pshell-client.conf file
    -f         - run commands from a batch file
    -t         - change the default server response timeout
    hostName   - hostname of desired PSHELL server (UDP only)
    ipAddress  - IP address of desired PSHELL server (UDP only)
    unix       - Specifies server is a UNIX domain server
    serverName - name of desired PSHELL server (UDP or UNIX)
    portNum    - port number of desired PSHELL server (UDP only)
    timeout    - value in seconds to use for server response timeout
    command    - optional command to execute
    fileName   - optional batch file to execute
    rate       - optional rate to repeat command or batch file (in seconds)
    clear      - clear screen between commands or batch file passes

    NOTE: If no <command> is given, pshell will be started
          up in interactive mode, commands issued in command
          line mode that require arguments must be enclosed
          in double quotes, commands issued in interactive
          mode that require arguments do not require double
          quotes.

          To get help on a command in command line mode, type
          "<command> ?" or "<command> -h".  To get help in
          interactive mode type 'help' or '?' at the prompt to
          see all available commands, to get help on a single
          command, type '<command> {? | -h}'.  Use TAB completion
          to fill out partial commands and up-arrow to recall
          the last entered command.

NOTE: The "-t <timeout>" option,the "unix" specifier, and the "batch" interative
      command are only supported on the UDP/UNIX client/server.

Invoke the pshell client program per the above usage.  The pshellServerDemo
program uses the identifier "localhost" for the hostname, this name
name should be used for the hostname given to the pshell client.

EXAMPLES:

The following is an example of how to enter into interactive mode
with the pshellServerDemo program:

$ pshell localhost pshellServerDemo

Once this command is invoked, an interactive command line prompt is
given as follows:

pshellServerDemo[127.0.0.1]:PSHELL>

The following is an example of specifying a different server response
timeout value.  If a value is given, the default response timeout of
5 seconds will be replaced by this value (UDP/UNIX client only).

$ pshell -t20 localhost pshellServerDemo

Commands can then be entered interactivley.  The following example shows
how to display the command list in interactive mode (note that "?" also work):

pshellServerDemo[127.0.0.1]:PSHELL> help

The following shows the same command entered in command line mode:

$ pshell localhost pshellServerDemo -h

The following shows an example of executing a command with arguments:

pshellServerDemo[127.0.0.1]:PSHELL> hello 1 2 3

The following shows the same command entered in command line mode:

$ pshell localhost pshellServerDemo "hello 1 2 3"

The following shows how to execute command from a batch file in
interactive mode (UDP/UNIX client only):

pshellServerDemo[127.0.0.1]:PSHELL> batch pshellServerDemo.batch

The following shows the same command entered in command line mode:

$ pshell localhost pshellServerDemo -f pshellServerDemo.batch

The following example shows how to display the usage of a given command
in ineractive mode (note that "-h" also works)

pshellServerDemo[127.0.0.1]:PSHELL> hello ?

The following shows the same command entered in command line mode,
note that "-h" will also accomplish the same thing:

$ pshell localhost pshellServerDemo "hello ?"

The following example shows executing a command at a periodic rate
(every 1 second), this feature is available only in command line mode
(note, if no arguments are given for the command, the double quotes
are not necessary):

$ pshell localhost pshellServerDemo "hello 1 2 3" 1

The following example shows the same command as above but clearing the
screen before each command

$ pshell localhost pshellServerDemo "hello 1 2 3" 1 clear

The following example shows executing a batch file at a periodic rate
(every 1 second), this feature is available only in command line mode.

$ pshell localhost pshellServerDemo -f pshellServerDemo.batch 1

The following example shows the same command as above but clearing the
screen before each invocation of the batch file

$ pshell localhost pshellServerDemo -f pshellServerDemo.batch 1 clear

The final example shows how to list all the named PSHELL servers in the
$PSHELL_CONFIG_DIR/pshell-client.conf file, this is also only available
in command line mode:

$ pshell -s

A complete code example of application programs that use all the
main features of the PSHELL library can be found in the files:

$PSHELL_INSTALL/demo/pshellServerDemo.cc   --  Server demo with user defined commands
$PSHELL_INSTALL/demo/pshellControlDemo.cc  --  Sample pshell control client
$PSHELL_INSTALL/demo/traceFilterDemo.cc    --  Server demo dynamic trace filtering

SECURITY:

This package provides for remote interaction and control of a process
running the PshellServer application via an IP based client/server paradigm.
The pshell protocol used to communicate between the client and server is an
unencrypted plain text protocol.  As such, if security is an issue, it
should be treated as any other unsecure protocol, such as telnet.  The
local target's PshellServer IP address and port should only be exposed within
a local network or secure VPN, but should not be exposed for general use
over untrusted networks, such as the public Internet.  For maximum security
between the client and server, the server can be run at the target host's
local loopback address (i.e. 127.0.0.1) and the PSHELL client application can
be installed to run on the same local host as the target application.  Of
course, a secure mechanism would then need to be provided to gain user access
to that host (like ssh).

PORTING:

This package was written to run on Unix/Linux type platforms and their
derivitaves.  This does not preclude this package from being ported to
any other operating system.  All that is needed is basic BSD IP socket
and posix thread support.  This package is written entirely in standard
ANSI 'C'.

I hope you find this package useful.

Enjoy...

Ron Iovine

Copyright 2009 Ron Iovine
