.TH TraceFilter 3C "Sep 2012" "TraceFilter" "Dynamic interactive trace logging control" 
.SH NAME
TraceFilter - Dynamic interactive trace logging control
.SH DESCRIPTION
The TraceFilter functionality will provide the ability to interactively control
.br
a program's trace logging feature via the remote PSHELL CLI server functionality.
.br
The filtering mechanism is used in conjunction with an already existing logging
.br
system that uses the __FILE__, __FUNCTION__, __LINE__, and level paradigm.  The
.br
TraceFilter does not provide that actual logging service itself, only the filtering
.br
mechanism.  The API is designed to easily and transparently be retrofitted into
.br
the existing logging mechanism.
.SH SYNOPSIS

#include "TraceFilter.h"

typedef bool (*tf_TraceCallback) (void);

enum tf_TraceControl {TF_ONCE, TF_CONTINUOUS, TF_ABORT};

void tf_init(const char *configFile_);

void tf_registerThread(const char *threadName_);

bool tf_isFilterPassed(const char *file_, int line_, const char *function_, unsigned level_);

/* macro to registger a memory location to watch at every trace statement */
.br
#define TF_WATCH(symbol, address, width, format, control) 

/* macro to registger a function to be called at every trace statement */
.br
#define TF_CALLBACK(name, function, control)

The above synposis is just a summary of the most relevant part of the API, to
.br
see the full API refer to the include file 'TraceFilter.h'

The filter can be configured either via the startup file given in the 'tf_init'
.br
call or interactively via the PSHELL CLI.  To see the complete verbose usage of the
.br
CLI command, type 'trace ?' (or 'trace -h') at the CLI prompt.  The usage is shown
.br
below:

traceFilterDemo[127.0.0.1]:PSHELL> trace ?

Usage: trace {on | off} |
             show {config | levels | threads [<thread>] | symbols [<symbol>]} |
             load [<filename>] |
             filter {on | off} |
             global {on | off | all | default | [+|-]<level> [<level>] ...} |
             local {on | off} |
             file {on | off | [+|-]<file>[:<lineSpec>][:<levelSpec>] [<file>[:<lineSpec>][:<levelSpec>]] ...} |
             function {on | off | [+|-]<function>[:<levelSpec>] [<function>[:<levelSpec>]] ...} |
             thread {on | off | [+|-]<thread>[:<levelSpec>] [<thread>[:<levelSpec>]] ...}

  where:

    <symbol>    - the symbol (i.e.file) name or substring
    <thread>    - the registered thread name or substring
    <level>     - one of the available trace levels
    <lineSpec>  - list of one or more lines to filter (e.g. 1,3,5-7,9)
    <levelSpec> - list of one or more levels or 'default' (e.g. enter,exit)
    +           - append the filter item to the specified list
    -           - remove the filter item from the specified list

  NOTE: If no '+' or '-' is given, the filter is set to the entered list
.SH EXAMPLES
See the file traceFilterDemo.c in the pshell distribution package for a complete
.br
list of examples of integrating the TraceFilter mechanism into an existing
.br
trace logging system.
.SH MT-LEVEL
Safe
.SH SEE ALSO
pshell(1)
