#!/usr/bin/expect

#################################################################################
# 
# Copyright (c) 2009, Ron Iovine, All rights reserved.  
#  
# Redistribution and use in source and binary forms, with or without 
# modification, are permitted provided that the following conditions are met:
#     * Redistributions of source code must retain the above copyright
#       notice, this list of conditions and the following disclaimer.
#     * Redistributions in binary form must reproduce the above copyright
#       notice, this list of conditions and the following disclaimer in the
#       documentation and/or other materials provided with the distribution.
#     * Neither the name of Ron Iovine nor the names of its contributors 
#       may be used to endorse or promote products derived from this software 
#       without specific prior written permission.
# 
# THIS SOFTWARE IS PROVIDED BY Ron Iovine ''AS IS'' AND ANY EXPRESS OR 
# IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES 
# OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. 
# IN NO EVENT SHALL Ron Iovine BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, 
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, 
# PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR 
# BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER 
# IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE 
# POSSIBILITY OF SUCH DAMAGE. 
#
#################################################################################

#################################################################################
#
# This is an expect script that wraps a telnet session for the TCP based PSHELL
# server to provide for a similar command line usage as the UDP based "pshell"
# client program that is used for the UDP/UNIX based PSHELL server
#
#################################################################################

# if the terminal title bar and prompt are changed in the PshellServer.c file from
# these defaults below, make sure the following two variables are changed accordingly,
# however, if the defaults are overridden in the pshell-server.conf file AND this
# script is invoked with a serverName as opposed to just a portNum, this script will
# detect the new values for that server and assign them accordingly, then these do not
# need to be changed

set title "PSHELL"
set prompt "PSHELL>"

set defaultInstallDir "/etc/pshell"
set defaultConfigDir $defaultInstallDir/"config"
set defaultBatchDir $defaultInstallDir/"batch"
set defaultClientConfigFile "pshell-client.conf"
set defaultServerConfigFile "pshell-server.conf"

proc showUsage {} {
  variable defaultClientConfigFile
  variable defaultServerConfigFile
  puts ""
  puts "Usage: pshell.exp -s | {<hostName> | ipAddr>} {<portNum> | <serverName>}"
  puts "                       \[{<command> \[rate=<seconds>\] \[repeat=<count>\] \[clear\]} |"
  puts "                        {-f <fileName> \[rate=<seconds>\] \[repeat=<count>\] \[clear\]}\]"
  puts ""
  puts "  where:"
  puts ""
  puts "    -s         - show named servers in $defaultClientConfigFile file"
  puts "    -f         - run commands from a batch file"
  puts "    hostName   - hostname of TCP server"
  puts "    ipAddr     - IP address of TCP server"
  puts "    portNum    - port number of TCP server"
  puts "    serverName - name of TCP server from pshell-client.conf file"
  puts "    command    - optional command to execute"
  puts "    fileName   - optional batch file to execute"
  puts "    rate       - optional rate to repeat command or batch file (in seconds)"
  puts "    repeat     - optional repeat count for command or batch file (default=forever)"
  puts "    clear      - optional clear screen between commands or batch file passes"
  puts ""
  puts "    NOTE: If no <command> is given, pshell will be started"
  puts "          up in interactive mode, commands issued in command"
  puts "          line mode that require arguments must be enclosed "
  puts "          in double quotes, commands issued in interactive"
  puts "          mode that require arguments do not require double"
  puts "          quotes."
  puts ""
  puts "          To get help on a command in command line mode, type"
  puts "          \"<command> ?\" or \"<command> -h\".  To get help in"
  puts "          interactive mode type 'help' or '?' at the prompt to"
  puts "          see all available commands, to get help on a single"
  puts "          command, type '<command> {? | -h}'.  Use TAB completion"
  puts "          to fill out partial commands and up-arrow to recall"
  puts "          the last entered command."
  puts ""
  puts "    NOTE: If the default terminal title bar and/or prompt are changed"
  puts "          in the PshellServers.c file, the variables 'title' and 'prompt'"
  puts "          at the top of this script must be changed accordingly, however,"
  puts "          if the default terminal title bar and/or prompt are changed in"
  puts "          the $defaultServerConfigFile file AND we are calling this script with"
  puts "          a serverName as opposed to a portNum, this script will automatically"
  puts "          detect that and assign the new values"
  puts ""
  exit
}

proc setTitle {title} {
  puts -nonewline "\033\]0;$title\007"
  flush stdout
}

proc clearScreen {} {
  variable clearScreen
  puts -nonewline $clearScreen
  flush stdout
}

# validate our command line argument count
if {[llength $argv] < 1 || [llength $argv] > 6} {
  showUsage
}

set timeout 30
#log_user 0
if {[llength $argv] == 1} {
  if {[lindex $argv 0] == "-s"} {
    # see if our env variable exists
    if { [info exists env(PSHELL_CONFIG_DIR) ] } {
      set clientConfFile $env(PSHELL_CONFIG_DIR)/$defaultClientConfigFile
    } else {
      set clientConfFile $defaultConfigDir/$defaultClientConfigFile
    }
    # check if our source file exists
    if ![file exists $clientConfFile] {
      puts "PSHELL_ERROR: Client config file '$clientConfFile' not found"
      exit
    }
    # scan the file to get our mas server name length so we can have a prettily aligned output
    set maxServerNameLength 11
    set file [open $clientConfFile r]
    while {[gets $file line] != -1} {
      if {[string index $line 0] != "#" && [string length $line] > 0} {
        set list [split $line ":"]
        if {[llength $list] >= 2 && [string length [lindex $list 0]] > $maxServerNameLength} {
          set maxServerNameLength [string length [lindex $list 0]]
        }
      }
    }
    # now display our servers, print out our banner
    puts ""
    puts "**************************************"
    puts "*      Available PSHELL Servers      *"
    puts "**************************************"
    puts ""
    puts -nonewline "Server Name"
    for {set count 11} {$count < $maxServerNameLength} {incr count 1} {
      puts -nonewline " "
    }
    puts "  Port Number"
    for {set count 0} {$count < $maxServerNameLength} {incr count 1} {
      #puts -nonewline "-"
      puts -nonewline "="
    }
    #puts "  -----------"
    puts "  ==========="
    # got the max server name length, now reset the file pointer and read it again
    seek $file 0
    while {[gets $file line] != -1} {
      if {[string index $line 0] != "#" && [string length $line] > 0} {
        set list [split $line ":"]
        if {[llength $list] >= 2} {
          set serverName [lindex $list 0]
          set portNum [lindex $list 1]
          puts -nonewline $serverName
          for {set count [string length $serverName]} {$count < $maxServerNameLength} {incr count 1} {
            puts -nonewline " "
          }
          puts "  $portNum"
        }
      }
    }
    puts ""
    exit
  } else {
    showUsage
  }
} 

# dropped through to here, try to connect to the specified server
set hostOrIpAddr [lindex $argv 0]
set serverName [lindex $argv 1]
set portNum $serverName

# see if we have a named server
if { !([string is integer $serverName]) } {
  set portNum -1
  # open the client config file to get the port number
  if { [info exists env(PSHELL_CONFIG_DIR)] && [file exists $env(PSHELL_CONFIG_DIR)/$defaultClientConfigFile] } {
    set clientConfFile $env(PSHELL_CONFIG_DIR)/$defaultClientConfigFile
  } else {
    set clientConfFile $defaultConfigDir/$defaultClientConfigFile
  }
  if { [file exists $clientConfFile] } {
    set file [open $clientConfFile r]
    while {[gets $file line] != -1} {
      if {[string index $line 0] != "#" && [string length $line] > 0} {
        set list [split $line ":"]
        if {[llength $list] >= 2 && [string first $serverName [lindex $list 0]] != -1} {
          set portNum [lindex $list 1]
          break
        }
      }
    }
  } else {
    puts "PSHELL_ERROR: Could not open client config file: '$clientConfFile'"
    exit
  }
  
  # see if we found a port for the specified named server in our client config file
  if { $portNum == -1 } {
    puts "PSHELL_ERROR: Could not find server: '$serverName' in file: '$clientConfFile'"
    exit
  }

  # open the servers config file to get any prompt and/or title override
  if { [info exists env(PSHELL_CONFIG_DIR)] && [file exists $env(PSHELL_CONFIG_DIR)/$defaultServerConfigFile] } {
    set serverConfFile $env(PSHELL_CONFIG_DIR)/$defaultServerConfigFile
  } else {
    set serverConfFile $defaultConfigDir/$defaultServerConfigFile
  }
  if { [file exists $serverConfFile] } {
    set file [open $serverConfFile r]
    while {[gets $file line] != -1} {
      if {[string index $line 0] != "#" && [string length $line] > 0} {
        set list [split $line "="]
        if {[llength $list] == 2 && [string compare $serverName.title [lindex $list 0]] == 0} {
          set title [string range [lindex $list 1] 1 end-1]
        }
        if {[llength $list] == 2 && [string compare $serverName.prompt [lindex $list 0]] == 0} {
          set prompt [string trimright [string range [lindex $list 1] 1 end-1]]
        }
      }
    }
  }
}

set rate 0
set repeat 0
set command ""
set batchFile ""
set fileNeeded "false"
set clearScreen ""

# parse our command line
for {set i 2} {$i < [llength $argv]} {incr i} {
  set arg [lindex $argv $i]
  set rateOrRepeat [split $arg "="]
  if {$arg == "-h" || $arg == "--h" || $arg == "-help" || $arg == "--help" || $arg == "?"} {
    set command "help"
    break
  } elseif {$arg == "-f"} {
    fileNeeded = "true"
  } elseif {$fileNeeded == "true"} {
    set batchFile $arg
    set fileNeeded "false"
  } elseif {[llength $rateOrRepeat] == 2} {
    if {[lindex $rateOrRepeat 0] == "rate"} {
      set rate [lindex $rateOrRepeat 1]
    } elseif {[lindex $rateOrRepeat 0] == "repeat"} {
      set repeat [lindex $rateOrRepeat 1]
    } else {
      showUsage
    }
  } elseif {$arg == "clear"} {
    set clearScreen "\033\[H\033\[J"
  } else {
    set command $arg
  }
}

# connect to our server
spawn -noecho telnet $hostOrIpAddr $portNum
expect {
  "Connection refused" { exit }
  "Unknown host" { exit }
  "Connection timed out" { exit }
  "bad port" { exit }
  timeout { 
    puts "telnet: connect to address $hostOrIpAddr: Connection timed out" 
    exit 
  }
  $prompt 
}

# get our actual server name & ip address based on the prompt
set welcome [split $expect_out(buffer) "\n"]
set serverNameAndIpAddress [split  [lindex $welcome [expr [llength $welcome]-1]] ":"]
set serverName [lindex [split $serverNameAndIpAddress "\["] 0]
set serverName [lindex [split $serverName "\r"] 1]
set ipAddress [lindex [split $serverNameAndIpAddress "\]"] 0]
set ipAddress [lindex [split $ipAddress "\["] 1]

# process our request    
if {$command != ""} {
  if {$rate > 0 || $repeat > 0} {
    set keyword $command
    set keyword [split $keyword " "]
    set keyword [lindex $keyword 0]
    # setup our terminal title bar
    if {$repeat == 0} {
      setTitle "$title: $serverName\[$ipAddress\], Mode: COMMAND LINE\[$command\], Rate: $rate SEC"
    }
    set iteration 0
    while {1} {
      incr iteration
      # modify iteration count for each pass
      if {$repeat > 0} {
        setTitle "$title: $serverName\[$ipAddress\], Mode: COMMAND LINE\[$command\], Rate: $rate SEC, Iteration: $iteration of $repeat"
      }
      clearScreen
      send "$command\r"
      expect $prompt
      if {$iteration == $repeat} {
        break
      }
      sleep $rate
    }
    send "quit\r"
    puts ""
    exit
  } else {
    clearScreen
    send "$command\r"
    expect $prompt
    send "quit\r"
    puts ""
    exit
  }
} elseif {$batchFile != ""} {
  set filename $batchFile
  if {[info exists env(PSHELL_BATCH_DIR)]} {
    set batchFile $env(PSHELL_BATCH_DIR)/$filename
    if {!([file exists $batchFile])} {
      puts ""
      puts "PSHELL_ERROR: Batch file '$batchFile' not found"
      set batchFile $defaultBatchDir/$filename
      if {!([file exists $batchFile])} {
        puts "PSHELL_ERROR: Batch file '$batchFile' not found"
        set batchFile $filename
      }
    }
  } else {
    set batchFile $defaultBatchDir/$batchFile
    if {!([file exists $batchFile])} {
      puts ""
      puts "PSHELL_ERROR: Batch file '$batchFile' not found"
      set batchFile $filename
    }
  }
  if {[file exists $batchFile]} {
    if {$rate > 0 || $repeat > 0} {
      # setup our terminal title bar
      if {$repeat == 0} {
        setTitle "$title: $serverName\[$ipAddress\], Mode: BATCH\[$filename\], Rate: $rate SEC"
      }
      set file [open $batchFile r]
      set iteration 0
      while {1} {
        incr iteration
        # modify iteration count for each pass
        if {$repeat > 0} {
          setTitle "$title: $serverName\[$ipAddress\], Mode: BATCH\[$filename\], Rate: $rate SEC, Iteration: $iteration of $repeat"
        }
        # rewind file
        seek $file 0
        clearScreen
        while {[gets $file command] != -1} {
          if {[string index $command 0] != "#" && [string length $command] > 0} {
            send "$command\r"
            expect $prompt      
          }
        }
        if {$iteration == $repeat} {
          break
        }
        sleep $rate        
      }
      send "quit\r"
      puts ""
      exit
    } else {
      clearScreen
      set file [open $batchFile r]
      while {[gets $file command] != -1} {
        if {[string index $command 0] != "#" && [string length $command] > 0} {
          send "$command\r"
          expect $prompt      
        }
      }
      send "quit\r"
      puts ""
    }
  } else {
    puts "PSHELL_ERROR: Batch file '$batchFile' not found"
  }
  exit
} else {
  # setup our terminal title bar
  setTitle "$title: $serverName\[$ipAddress\], Mode: INTERACTIVE"
  interact
}
