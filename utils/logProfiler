#!/usr/bin/python

################################################################################
#
# logProfiler:
#
# This program will provide the ability to perform code performance analysis
# based on a logfile that was generated by programs that instrument their code
# with trace log statements that use a file, function, line,and timestamp
#
################################################################################

# import all our necessary modules
import sys
import re
import os
import datetime
import operator

##############################
#
# global data
#
##############################

# dummy variables so we can create pseudo end block indicators, add these identifiers to your
# list of python keywords in your editor to get syntax highlighting on these identifiers, sorry Guido
enddef = endif = endwhile = endfor = None

# python does not have a native null string identifier, so create one
NULL = ""

# modify the following items for different trace log line formats
gTimestampFormat = "%H:%M:%S.%f"
gEnterLabel = "Enter"
gExitLabel = "Exit"
gTokenDelimiter = "|"
gExpectedNumTokens = 5
gTimestampTokenPos = 2
gLocationTokenPos = 3
gTypeTokenPos = 1

gFilenameTokenPos = 3
gLineTokenPos = 3
gFunctionTokenPos = 4

# modify to use the desired keep alive indication,
# valid values are 'lines', 'wheel', 'dots', and 'none'
gKeepAliveType = "lines"

# display formatting constants
gBanner = "LOGFILE PROFILER"
gBannerLength = len(gBanner)

gAreaLabel1 = "START CODE AREA"
gMinArea1Width = len(gAreaLabel1)

gAreaLabel2 = "END CODE AREA"
gMinArea2Width = len(gAreaLabel2)

gOccurancesLabel = "OCC"
gOccurancesLabelLength = len(gOccurancesLabel)+3

gTotTimeLabel = "TOT TIME"
gMaxTimeLabel = "MAX TIME"
gMinTimeLabel = "MIN TIME"
gAvgTimeLabel = "AVG TIME"
gMedTimeLabel = "MED TIME"
gStdDevLabel = "STD DEV"
gLabelSuffix = NULL

gTimeDeltaLength = 14
gTimeDeltaCount = 6

gUnderline = "="

gSpaceLength = 2

gNormalDisplayColumns = 11
gNormalDisplayPadLength = gSpaceLength*(gNormalDisplayColumns-1)

gTotalLines = 0
gClearStatusUpdate = "\r"

gTimestampEndings = (']', '|', ' ')
gTimestampPositions = {0, 4}
gTimestampFormat = "%H:%M:%S.%f"
gTimestampRegexp0 = '\d{2}:\d{2}:\d{2}.\d{3}'
gTimestampRegexp1 = '\d{2}:\d{2}:\d{2}.\d{4}'
gTimestampRegexp2 = '\d{2}:\d{2}:\d{2}.\d{5}'
gTimestampRegexp3 = '\d{2}:\d{2}:\d{2}.\d{6}'
gTimestampRegexp4 = '\d{4}-\d{2}-\d{2}Td{2}:\d{2}:\d{2}.\d{5}'
gGreen = "\33[0;32m"
gRed = "\33[0;31m"
gAmber = "\33[0;33m"
gHighlight = gAmber
gNormal = "\33[0m"

# various keep alive global variables
gValidKeepAliveTypes = ('wheel', 'dots', 'lines', 'none')
gWheel = ('|', '/', '-', '\\')
gWheelIndex = 0

# command line option switches and default values
gValidOptions = ('-tot', '-min', '-max', '-avg', '-med', '-std', '-occ')
gValidFilters = ('num', 'file', 'func', 'out', 'diff')
gValidDiffs = ('percent', 'time')
gDiffRequested = False
gTimeSuffix = NULL
gTimeWidthAdjust = 0
gOccuranceSuffix = NULL
gOccuranceWidthAdjust = 0
gTotalRunTime = datetime.timedelta(0)
gTotalProfiledTime = datetime.timedelta(0)
gDisplayAll = "all"
gNoFilter = "none"
gNoOption = "none"
gMaxAreaWidth1 = 0
gMaxAreaWidth2 = 0

# global profile lists
gProfiles1 = []
gProfiles2 = []
gProfilesDiff = []

#####################################################
#
# display the program usage
#
#####################################################
def showUsage():
  print
  print "Usage: logProfiler [-tot | -min | -max | -avg | -med | -std | -occ]"
  print "                   [num=<count>] [file=<name>] [func=<name>] [out=<outfile>] [diff=<type>] [delta=<time>]"
  print "                   <logfile1> [<logfile2>...<logfileN>]"
  print
  print "  This program will provide several ways to analyze a logfile that has a log entry"
  print "  format that includes a file, function, line, and timestamp."
  print
  print "  It will currently work with log entries of the following formats:"
  print
  print "  my-app | Warning | 14:40:32.377256 | my-file(my-function):my-line | my-message"
  print "  2017-10-12T09:26:04.31081 <WARN> my-hostname: my-app: my-function: my-file@my-line: my-message"
  print
  print "  where:"
  print "    -tot      : Sort highest to lowest total time"
  print "    -min      : Sort highest to lowest minimum time"
  print "    -max      : Sort highest to lowest maximum time"
  print "    -avg      : Sort highest to lowest average time"
  print "    -med      : Sort highest to lowest median time"
  print "    -std      : Sort highest to lowest standard deviation time"
  print "    -occ      : Sort highest to lowest number of occurances"
  print "    num       : Specify number of entries to display"
  print "    file      : Specify a file name display filter"
  print "    func      : Specify a function name display filter"
  print "    out       : Specify an output file to write the results"
  print "    diff      : Compute diff between logfile1 and logfile2 profiles"
  print "    delta     : Show all areas that are >= specified time"
  print "    <count>   : The number of entries to display"
  print "    <name>    : Name (or substring) of file/function display filter"
  print "    <type>    : The desired diff type, valid values are 'percent' and 'time'"
  print "    <time>    : The time delta in seconds (float)"
  print "    <outfile> : Name of the output file to write the results"
  print "    <logfile> : Trace log file to profile"
  print
  print "  NOTE: If doing a non-diff profile, as many logfiles can be given as desired,"
  print "        for a 'diff' based profile, exactly two logfiles must be given, for a"
  print "        time 'delta' based analysis, only one logfile should be provided"
  print
  sys.exit()
enddef

#####################################################
#
# print a keep alive indicator
#
#####################################################
def printKeepAlive(numLines, type):
  global gWheel
  global gWheelIndex
  global gClearStatusUpdate
  global gTotalLines
  if (type == "wheel"):
    if (numLines == 0):
      sys.stdout.write("%s%s%s" % ("\b"*17, " "*17, "\b"*17))
      sys.stdout.flush()
    endif
    if ((numLines % 1000) == 0):
      sys.stdout.write("%s\b" % gWheel[gWheelIndex])
      sys.stdout.flush()
      gWheelIndex += 1
      gWheelIndex = gWheelIndex % len(gWheel)
    endif
  elif (type == "dots"):
    if (numLines == 0):
      sys.stdout.write("%s%s%s" % ("\b"*20, " "*20, "\b"*20))
      sys.stdout.flush()
    endif
    if ((numLines % 5000) == 0):
      sys.stdout.write(".")
      sys.stdout.flush()
    endif
  elif (type == "lines"):
    gClearStatusUpdate = "\n\n"
    sys.stdout.write("%s of %s%s" % (str(numLines+1).ljust(len(str(gTotalLines))), gTotalLines, "\b"*(len(str(gTotalLines))*2+4)))
    sys.stdout.flush()
  else:
    if (numLines == 0):
      sys.stdout.write("%s%s%s" % ("\b"*17, " "*17, "\b"*17))
      sys.stdout.flush()
    endif
  endif
enddef

#####################################################
#
# convert a timedelta time to seconds
#
#####################################################
def timeDeltaToSec(timeDelta):
  return float(timeDeltaToUsec(timeDelta) / 1000000.0)
enddef

#####################################################
#
# convert a timedelta time to microseconds
#
#####################################################
def timeDeltaToUsec(timeDelta):
  return abs(timeDelta.microseconds + (timeDelta.seconds + timeDelta.days * 86400) * 1000000)
enddef

#####################################################
#
# calculated the median times for all the profiles
#
#####################################################
def calculateMedian(profiles):
  for profile in profiles:
    profile["delta"].sort()
    if (len(profile["delta"]) == 1):
      profile["med"] = profile["delta"][0]
    elif (len(profile["delta"])%2 == 0):
      timeDelta1 = profile["delta"][len(profile["delta"])/2-1]
      timeDelta2 = profile["delta"][len(profile["delta"])/2]
      profile["med"] = (timeDelta1+timeDelta2)/2
    else:
      profile["med"] = profile["delta"][len(profile["delta"])/2]
    endif
  endfor
enddef

#########################################################
#
# calculated the standard deviation for all the profiles
#
#########################################################
def calculateStdDeviation(profiles):
  for profile in profiles:
    sumDiffSquared = 0.0
    for timeDelta in profile["delta"]:
      sumDiffSquared = (timeDeltaToUsec(timeDelta)-timeDeltaToUsec(profile["avg"]))**2 + sumDiffSquared
    endfor
    profile["stdDev"] = datetime.timedelta(microseconds=((sumDiffSquared)/len(profile["delta"]))**(1.0/2.0))
  endfor
enddef

#####################################################
#
# find a profile based on filename/function
#
#####################################################
def findProfile(profiles, filename1, function1, line1, filename2, function2, line2):
  for profile in profiles:
    if ((profile["file1"] == filename1) and (profile["function1"] == function1) and (profile["line1"] == line1) and
        (profile["file2"] == filename2) and (profile["function2"] == function2) and (profile["line2"] == line2)):
      return (profile)
    endif
  endfor
  return (None)
enddef

#####################################################
#
# find the timestamp from the input line
#
#####################################################
def parseLine(line):
  
  # change this line parsing function for different log line formats,
  # we need to extract the file, function, line, and timestamp, an
  # example of the currently parsed log line formats are:
  #
  # my-app | Warning    | 14:40:32.377256 | my-file(my-function):my-line | my-message
  #
  # 2017-10-12T09:26:04.31081 <WARN> my-hostname: my-app: my-function: my-file@my-line: my-message
  #

  # parse format: my-app | Warning | 14:40:32.377256 | my-file(my-function):my-line | my-message
  tokenDelimiter = "|"
  expectedNumTokens = 5
  timestampTokenPos = 2
  filenameTokenPos = 3
  lineTokenPos = filenameTokenPos
  functionTokenPos = filenameTokenPos

  tokens = line.split(tokenDelimiter)
  if (len(tokens) >= expectedNumTokens):
    timestamp = findTimestamp(tokens[timestampTokenPos].strip())
    if (timestamp != NULL):
      filename = tokens[filenameTokenPos].strip().split("(")[0]
      line = tokens[lineTokenPos].strip().split(":")[-1]
      function = tokens[functionTokenPos].strip().split("(")[-1]
      function = function.split(")")[0]
      return (filename, function, line, timestamp)
    else:
      return (None, None, None, None)
    endif
  else:
    # parse format: 2017-10-12T09:26:04.31081 <WARN> my-hostname: my-app: my-function: my-file@my-line: my-message
    tokenDelimiter = " "
    expectedNumTokens = 6
    timestampTokenPos = 0
    filenameTokenPos = 5
    functionTokenPos = 4
    lineTokenPos = filenameTokenPos
    tokens = line.split(tokenDelimiter)
    if (len(tokens) >= expectedNumTokens):
      timestamp = findTimestamp(tokens[timestampTokenPos].strip())
      if (timestamp != NULL):
        filename = tokens[filenameTokenPos].strip().split("@")[0]
        line = tokens[filenameTokenPos].strip().split("@")[-1][:-1]
        function = tokens[functionTokenPos].strip().split(":")[0]
        return (filename, function, line, timestamp)
      else:
        return (None, None, None, None)
      endif
    else:
      return (None, None, None, None)
    endif
  endif
  
enddef

######################################################
#
# update an existing area profile or create a new one
#
######################################################
def updateProfile(profiles, prevLine, currLine):
  
  global gTotalProfiledTime
  global gMaxAreaWidth1
  global gMaxAreaWidth2
  
  (filename1, function1, line1, timestamp1) = parseLine(prevLine)
  (filename2, function2, line2, timestamp2) = parseLine(currLine)
  
  if ((filename1 != None) and (filename2 != None)):
  
    # both lines are good, now either update an existing area profile, or create a new one

    profile = findProfile(profiles, filename1, function1, line1, filename2, function2, line2)
    currTime = datetime.datetime.strptime(timestamp2, gTimestampFormat)
    prevTime = datetime.datetime.strptime(timestamp1, gTimestampFormat)
    timeDelta = currTime - prevTime
    if (profile == None):
      # create new profile
      areaWidth1 = len(filename1)+len(function1)+len(line1)+3
      areaWidth2 = len(filename2)+len(function2)+len(line2)+3
      profiles.append({"file1":filename1,
                       "function1":function1,
                       "line1":line1,
                       "areaWidth1":areaWidth1,
                       "file2":filename2,
                       "function2":function2,
                       "line2":line2,
                       "areaWidth2":areaWidth2,
                       "count":0,
                       "tot":datetime.timedelta(0),
                       "min":datetime.timedelta.max,
                       "max":datetime.timedelta.min,
                       "avg":datetime.timedelta(0),
                       "med":datetime.timedelta(0),
                       "stdDev":datetime.timedelta(0),
                       "delta":[]})
      profile = profiles[-1]
      if (areaWidth1 > gMaxAreaWidth1):
        gMaxAreaWidth1 = areaWidth1
      endif
      if (areaWidth2 > gMaxAreaWidth2):
        gMaxAreaWidth2 = areaWidth2
      endif
    endif
    profile["count"] += 1
    profile["tot"] += timeDelta
    gTotalProfiledTime += timeDelta
    profile["avg"] = profile["tot"]/profile["count"]
    profile["delta"].append(timeDelta)
    if (timeDelta > profile["max"]):
      profile["max"] = timeDelta
    endif
    if (timeDelta < profile["min"]):
      profile["min"] = timeDelta
    endif
  endif
  
enddef

#####################################################
#
# creates the specified profile
#
#####################################################
def createProfile(logfile, profiles):
  global gTotalLines
  global gKeepAliveType
  global gTokenDelimiter
  global gExpectedNumTokens
  global gTimestampTokenPos
  global gLocationTokenPos
  global gFilenameTokenPos
  global gLineTokenPos
  global gFunctionTokenPos
  global gTypeTokenPos
  global gTimestampFormat
  global gTotalRunTime
  lastTimestamp = datetime.timedelta(0)
  firstTimestamp = datetime.timedelta(0)
  if (os.path.isfile(logfile)):
    file = open(logfile, 'r')
    print
    sys.stdout.write("Creating profile from file: %s, please wait...processing line: " % logfile)
    if (gKeepAliveType == "lines"):
      # if we are showing the lines processed keep alive, make an initial
      # pass of the file so we can sount the total number of lines
      gTotalLines = 0
      for line in file:
        gTotalLines += 1
      endfor
      file.seek(0)
    endif
    numLines = 0
    currLine = None
    for line in file:
      printKeepAlive(numLines, gKeepAliveType)
      prevLine = currLine
      currLine = line
      if (numLines > 0):
        updateProfile(profiles, prevLine, currLine)
      endif
      numLines += 1
    endfor
    gTotalRunTime = lastTimestamp - firstTimestamp
    calculateMedian(profiles)
    calculateStdDeviation(profiles)
    return (True)
  else:
    print "ERROR: logfile: %s not found..." % logfile
    return (False)
  endif
enddef

#####################################################
#
# shows time display
#
#####################################################
def getTimeDisplay(time, labelLength):
  global gTimeSuffix
  global gTimeWidthAdjust
  global gDiffRequested
  global gDiffType
  if (gDiffRequested):
    if (gDiffType == "percent"):
      width = 10
    else:
      width = 9
    endif
    if (time > 0):
      return (("+"+str(time)).rjust(width)+gTimeSuffix).rjust(labelLength-gTimeWidthAdjust)
    else:
      return (str(time).rjust(width)+gTimeSuffix).rjust(labelLength-gTimeWidthAdjust)
    endif
  else:
    return (str(time)+gTimeSuffix).rjust(labelLength-gTimeWidthAdjust)
  endif
enddef

#####################################################
#
# shows occurances display
#
#####################################################
def getOccuranceDisplay(occurance, labelLength):
  global gOccuranceSuffix
  global gOccuranceWidthAdjust
  global gDiffRequested
  if (gDiffRequested):
    if (occurance > 0):
      return (("+"+str(occurance)).rjust(8)+gOccuranceSuffix).rjust(labelLength-gOccuranceWidthAdjust)
    else:
      return (str(occurance).rjust(8)+gOccuranceSuffix).rjust(labelLength-gOccuranceWidthAdjust)
    endif
  else:
    return (str(occurance).ljust(labelLength)+gOccuranceSuffix).rjust(labelLength-gOccuranceWidthAdjust)
  endif
enddef

#####################################################
#
# shows the current profile
#
#####################################################
def showProfile(logfile, outfile, option, count, fileFilter, functionFilter, profiles):
  global gBanner
  global gBannerLength

  global gOccurancesLabel
  global gOccurancesLabelLength

  global gTotTimeLabel
  global gMaxTimeLabel
  global gMinTimeLabel
  global gAvgTimeLabel
  global gMedTimeLabel
  global gStdDevLabel
  global gLabelSuffix

  global gTimeDeltaLength
  global gTimeDeltaCount

  global gUnderline

  global gSpaceLength

  global gNormalDisplayPadLength
  global gMismatchDisplayPadLength

  global gNoFilter
  global gDisplayAll
  global gClearStatusUpdate

  global gTotalRunTime
  global gDiffRequested
  
  global gAreaLabel1
  global gAreaLabel2
  
  global gMinAreaWidth1
  global gMinAreaWidth2

  global gMaxAreaWidth1
  global gMaxAreaWidth2

  totalDisplayedTime = datetime.timedelta(0)
  gOccurancesLabelLength = gOccurancesLabelLength + len(gLabelSuffix)

  if (outfile == "none"):
    file = sys.stdout
  else:
    file = open(outfile, "w+")
    gClearStatusUpdate = "\n"
  endif

  # see if we need to sort our profile
  if (option == "-max"):
    profiles.sort(key=operator.itemgetter('max'), reverse=True)
  elif (option == "-min"):
    profiles.sort(key=operator.itemgetter('min'), reverse=True)
  elif (option == "-avg"):
    profiles.sort(key=operator.itemgetter('avg'), reverse=True)
  elif (option == "-med"):
    profiles.sort(key=operator.itemgetter('med'), reverse=True)
  elif (option == "-std"):
    profiles.sort(key=operator.itemgetter('stdDev'), reverse=True)
  elif (option == "-tot"):
    profiles.sort(key=operator.itemgetter('tot'), reverse=True)
  elif (option == "-occ"):
    profiles.sort(key=operator.itemgetter('count'), reverse=True)
  endif

  maxAreaWidth1 = gMinArea1Width
  maxAreaWidth2 = gMinArea2Width
  if ((count != gDisplayAll) or (fileFilter != gNoFilter) or (functionFilter != gNoFilter)):
    numDisplayed = 0
    for profile in profiles:
      if ((((fileFilter == gNoFilter) and (functionFilter == gNoFilter)) or
           ((fileFilter != gNoFilter) and (functionFilter == gNoFilter) and ((fileFilter in profile["file1"]) or (fileFilter in profile["file2"]))) or
           ((functionFilter != gNoFilter) and (fileFilter == gNoFilter) and ((functionFilter in profile["function1"]) or (functionFilter in profile["function2"]))) or
           (((fileFilter in profile["file1"]) or (fileFilter in profile["file2"])) and ((functionFilter in profile["function1"]) or (functionFilter in profile["function2"]))))):
        numDisplayed += 1
        maxAreaWidth1 = max(maxAreaWidth1, profile["areaWidth1"])
        maxAreaWidth2 = max(maxAreaWidth2, profile["areaWidth2"])
      endif
      if ((count != gDisplayAll) and (numDisplayed >= int(count))):
        break
      endif
    endfor
  else:
    # we're displaying everything
    maxAreaWidth1 = gMaxAreaWidth1
    maxAreaWidth2 = gMaxAreaWidth2
  endif

  # display our header
  maxFieldWidth = maxAreaWidth1 + \
                  gMaxAreaWidth2 + \
                  gOccurancesLabelLength + \
                  gTimeDeltaLength*gTimeDeltaCount + \
                  gNormalDisplayPadLength
  file.write("%s%s\n" % (gClearStatusUpdate, gBanner.center(maxFieldWidth)))
  file.write("%s\n" % (gUnderline*max(len(logfile), gBannerLength)).center(maxFieldWidth))
  file.write("%s\n" % logfile.center(maxFieldWidth))
  file.write("\n")
  file.write("%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s\n" % (gAreaLabel1.ljust(maxAreaWidth1),
                                                       ' '.ljust(gSpaceLength),
                                                       gAreaLabel2.ljust(maxAreaWidth2),
                                                       ' '.ljust(gSpaceLength),
                                                       (gOccurancesLabel+gLabelSuffix).ljust(gOccurancesLabelLength),
                                                       ' '.ljust(gSpaceLength),
                                                       (gTotTimeLabel+gLabelSuffix).ljust(gTimeDeltaLength),
                                                       ' '.ljust(gSpaceLength),
                                                       (gMaxTimeLabel+gLabelSuffix).ljust(gTimeDeltaLength),
                                                       ' '.ljust(gSpaceLength),
                                                       (gMinTimeLabel+gLabelSuffix).ljust(gTimeDeltaLength),
                                                       ' '.ljust(gSpaceLength),
                                                       (gMedTimeLabel+gLabelSuffix).ljust(gTimeDeltaLength),
                                                       ' '.ljust(gSpaceLength),
                                                       (gAvgTimeLabel+gLabelSuffix).ljust(gTimeDeltaLength),
                                                       ' '.ljust(gSpaceLength),
                                                       (gStdDevLabel+gLabelSuffix).ljust(gTimeDeltaLength)))
  file.write("%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s\n" % (gUnderline.ljust(maxAreaWidth1, gUnderline),
                                                       ' '.ljust(gSpaceLength),
                                                       gUnderline.ljust(maxAreaWidth2, gUnderline),
                                                       ' '.ljust(gSpaceLength),
                                                       gUnderline.ljust(gOccurancesLabelLength, gUnderline),
                                                       ' '.ljust(gSpaceLength),
                                                       gUnderline.ljust(gTimeDeltaLength, gUnderline),
                                                       ' '.ljust(gSpaceLength),
                                                       gUnderline.ljust(gTimeDeltaLength, gUnderline),
                                                       ' '.ljust(gSpaceLength),
                                                       gUnderline.ljust(gTimeDeltaLength, gUnderline),
                                                       ' '.ljust(gSpaceLength),
                                                       gUnderline.ljust(gTimeDeltaLength, gUnderline),
                                                       ' '.ljust(gSpaceLength),
                                                       gUnderline.ljust(gTimeDeltaLength, gUnderline),
                                                       ' '.ljust(gSpaceLength),
                                                       gUnderline.ljust(gTimeDeltaLength, gUnderline)))
  # display our profile
  numDisplayed = 0
  for profile in profiles:
    if ((((fileFilter == gNoFilter) and (functionFilter == gNoFilter)) or
         ((fileFilter != gNoFilter) and (functionFilter == gNoFilter) and ((fileFilter in profile["file1"]) or (fileFilter in profile["file2"]))) or
         ((functionFilter != gNoFilter) and (fileFilter == gNoFilter) and ((functionFilter in profile["function1"]) or (functionFilter in profile["function2"]))) or
         (((fileFilter in profile["file1"]) or (fileFilter in profile["file2"])) and ((functionFilter in profile["function1"]) or (functionFilter in profile["function2"]))))):
      numDisplayed += 1
      # make the display of a 0 standard deviation display the microseconds part like all
      # the other time delta displays, a 0 time delta does not display the microseconds
      stdDev = "0:00:00.000000"
      if (profile["stdDev"] != datetime.timedelta(0)):
        stdDev = profile["stdDev"]
      endif
      if (not gDiffRequested):
        totalDisplayedTime += profile["tot"]
      endif
      area1 = profile["file1"] + "(" + profile["function1"] + "):" + str(profile["line1"])
      area2 = profile["file2"] + "(" + profile["function2"] + "):" + str(profile["line2"])
      file.write("%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s\n" % (area1.ljust(maxAreaWidth1),
                                                           ' '.ljust(gSpaceLength),
                                                           area2.ljust(maxAreaWidth2),
                                                           ' '.ljust(gSpaceLength),
                                                           getOccuranceDisplay(profile["count"], gOccurancesLabelLength).ljust(gOccurancesLabelLength),
                                                           ' '.ljust(gSpaceLength),
                                                           getTimeDisplay(profile["tot"], gTimeDeltaLength).ljust(gTimeDeltaLength),
                                                           ' '.ljust(gSpaceLength),
                                                           getTimeDisplay(profile["max"], gTimeDeltaLength).ljust(gTimeDeltaLength),
                                                           ' '.ljust(gSpaceLength),
                                                           getTimeDisplay(profile["min"], gTimeDeltaLength).ljust(gTimeDeltaLength),
                                                           ' '.ljust(gSpaceLength),
                                                           getTimeDisplay(profile["med"], gTimeDeltaLength).ljust(gTimeDeltaLength),
                                                           ' '.ljust(gSpaceLength),
                                                           getTimeDisplay(profile["avg"], gTimeDeltaLength).ljust(gTimeDeltaLength),
                                                           ' '.ljust(gSpaceLength),
                                                           getTimeDisplay(stdDev, gTimeDeltaLength).ljust(gTimeDeltaLength)))
    endif
    if ((count != gDisplayAll) and (numDisplayed >= int(count))):
      break
    endif
  endfor
  if (outfile != "none"):
    print
    print
    print "Results written to output file: %s" % outfile
    print
  endif
  file.write("\n")
  if (not gDiffRequested):
    file.write("\n")
    file.write("RESULTS SUMMARY:\n")
    file.write("%s\n" % gUnderline.ljust(34, gUnderline))
    file.write("Total areas     : %s\n" % len(profiles))
    file.write("Displayed areas : %d\n" % numDisplayed)
    file.write("Profiled time   : %s\n" % str(gTotalProfiledTime))
    file.write("Displayed time  : %s\n" % str(totalDisplayedTime))
    file.write("\n")
  endif
enddef

#####################################################
#
# returns the diff between two time deltas
#
#####################################################
def getTimedeltaDiff(timedelta1, timedelta2):
  global gDiffType
  if (timedelta1 > timedelta2):
    if (gDiffType == "percent"):
      return -round((float(timeDeltaToUsec(timedelta1)-timeDeltaToUsec(timedelta2))/float(timeDeltaToUsec(timedelta1))*100.0), 1)
    else:  # diffType == "time"
      return -int(timeDeltaToUsec(timedelta1)-timeDeltaToUsec(timedelta2))
    endif
  elif (timedelta2 > timedelta1):
    if (gDiffType == "percent"):
      if (timeDeltaToUsec(timedelta1) > 0):
        return round((float(timeDeltaToUsec(timedelta2)-timeDeltaToUsec(timedelta1))/float(timeDeltaToUsec(timedelta1))*100.0), 1)
      else:
        return "Infinity"
      endif
    else:  # diffType == "time"
      return int(timeDeltaToUsec(timedelta2)-timeDeltaToUsec(timedelta1))
    endif
  else:
    if (gDiffType == "percent"):
      return 0.0
    else:  # diffType == "time"
      return 0
    endif
  endif
enddef

#####################################################
#
# returns the diff between two time occurances
#
#####################################################
def getOccurancesDiff(occurance1, occurance2):
  global gDiffType
  if (occurance1 > occurance2):
    if (gDiffType == "percent"):
      return -round(((float(occurance1-occurance2)/float(occurance1))*100.0), 1)
    else:  # diffType == "time"
      return -int(occurance1-occurance2)
    endif
  elif (occurance2 > occurance1):
    if (gDiffType == "percent"):
      if (occurance1 > 0):
        return round(((float(occurance2-occurance1)/float(occurance1))*100.0), 1)
      else:
        return "Infinity"
      endif
    else:  # diffType == "time"
      return int(occurance2-occurance1)
    endif
  else:
    if (gDiffType == "percent"):
      return 0.0
    else:  # diffType == "time"
      return 0
    endif
  endif
enddef

#####################################################
#
# calculate the diffs between two profiles
#
#####################################################
def diffProfiles(profiles1, profiles2):
  global gDiffType
  global gProfilesDiff
  global gEnterLabel
  global gLabelSuffix
  global gTimeSuffix
  global gTimeWidthAdjust
  global gOccuranceSuffix
  global gOccuranceWidthAdjust
  if (gDiffType == "percent"):
    gLabelSuffix = " %diff"
    gTimeSuffix = "%"
    gOccuranceSuffix = "%"
    gTimeWidthAdjust = 5
    gOccuranceWidthAdjust = 5
  else:  # diffType == "time"
    gLabelSuffix = " diff"
    gTimeSuffix = " Usec"
    gTimeWidthAdjust = 3
    gOccuranceWidthAdjust = 5
  endif
  for profile1 in profiles1:
    profile2 = findProfile(profiles2, 
                           profile1["file1"], profile1["function1"], profile1["line1"], 
                           profile1["file2"], profile1["function2"], profile1["line2"])
    if (profile2 != None):
      gProfilesDiff.append({"file1":profile1["file1"],
                            "function1":profile1["function1"],
                            "line1":profile1["line1"],
                            "areaWidth1":profile1["areaWidth1"],
                            "file2":profile1["file2"],
                            "function2":profile1["function2"],
                            "line2":profile1["line2"],
                            "areaWidth2":profile1["areaWidth2"],
                            "count":getOccurancesDiff(profile1["count"], profile2["count"]),
                            "tot":getTimedeltaDiff(profile1["tot"], profile2["tot"]),
                            "min":getTimedeltaDiff(profile1["min"], profile2["min"]),
                            "max":getTimedeltaDiff(profile1["max"], profile2["max"]),
                            "avg":getTimedeltaDiff(profile1["avg"], profile2["avg"]),
                            "med":getTimedeltaDiff(profile1["med"], profile2["med"]),
                            "stdDev":getTimedeltaDiff(profile1["stdDev"], profile2["stdDev"])})
      endif
    endif
  endfor
enddef

#####################################################
#
# find the timestamp from the input line
#
#####################################################
def findTimestamp(line):
  global gTimestampEndings
  global gTimestampPositions
  global gTimestampRegexp0
  global gTimestampRegexp1
  global gTimestampRegexp2
  global gTimestampRegexp3
  global gTimestampRegexp4
  timestamp = line.split()
  for position in gTimestampPositions:
    if ((len(timestamp) > position) and (":" in timestamp[position])):
      if (timestamp[position][-1] in gTimestampEndings):
        timestamp = timestamp[position][:-1].strip()
      else:
        timestamp = timestamp[position].strip()
      endif
      if ('T' in timestamp):
        timestamp = timestamp.split("T")[-1]
      endif
      if (re.match(gTimestampRegexp0, timestamp) or
          re.match(gTimestampRegexp1, timestamp) or
          re.match(gTimestampRegexp2, timestamp) or
          re.match(gTimestampRegexp3, timestamp)):
        return (timestamp)
      endif
    endif
  endfor
  return (NULL)
enddef

#######################################################
#
# show all areas whose time delta is >= specified time
#
#######################################################
def showDelta(logfile, outfile, maxTimeDelta, count):
  if (os.path.isfile(logfile)):
    logfile = open(logfile, 'r')
    numLines = 0
    currLine = NULL
    currTimestampStr = NULL
    currLineNum = 1
    numOccurances = 0
    maxTimeDeltaDiff = 0.0
    minTimeDeltaDiff = sys.float_info.max
    if (outfile == "none"):
      outfile = sys.stdout
    else:
      outfile = open(outfile, "w+")
    endif
    outfile.write("\n")
    numDisplayed = 0
    for line in logfile:
      numLines += 1
      timestamp = findTimestamp(line)
      if (timestamp != NULL):
        prevLineNum = currLineNum
        currLineNum = numLines
        prevLine = currLine
        currLine = line
        prevTimestampStr = currTimestampStr
        currTimestampStr = timestamp
        if (prevTimestampStr != NULL):
          currTimestamp = datetime.datetime.strptime(currTimestampStr, gTimestampFormat)
          prevTimestamp = datetime.datetime.strptime(prevTimestampStr, gTimestampFormat)
          timestampDiff = timeDeltaToSec(currTimestamp - prevTimestamp)
          if (timestampDiff >= maxTimeDelta):
            numOccurances += 1
            if (timestampDiff > maxTimeDeltaDiff):
              maxTimeDeltaDiff = timestampDiff
            endif
            if (timestampDiff < minTimeDeltaDiff):
              minTimeDeltaDiff = timestampDiff
            endif
            if ((count == gDisplayAll) or (numDisplayed < int(count))):
              outfile.write("Time Delta (sec): %f\n" % timestampDiff)
              outfile.write("===============================\n")
              outfile.write("%s%d:%s %s\n" % (gHighlight, prevLineNum, gNormal, prevLine[:-1]))
              outfile.write("%s%d:%s %s\n" % (gHighlight, currLineNum, gNormal, currLine[:-1]))
              outfile.write("\n")
              numDisplayed += 1
            endif
          endif
        endif
      endif
    endfor
    outfile.write("RESULTS SUMMARY:\n")
    outfile.write("===========================\n")
    outfile.write("Time Delta (sec) : %f\n" % maxTimeDelta)
    if (maxTimeDeltaDiff > 0.0):
      outfile.write("Max Delta  (sec) : %f\n" % maxTimeDeltaDiff)
      outfile.write("Min Delta  (sec) : %f\n" % minTimeDeltaDiff)
    endif
    outfile.write("Num Occurances   : %d\n" % numOccurances)
    outfile.write("Num Displayed    : %d\n" % numDisplayed)
    outfile.write("\n")
  endif
enddef

#####################################################
#
# find the first valid file in the arg list
#
#####################################################
def findFirstFileArg(args):
  index = 1
  for arg in sys.argv[index:]:
    if (os.path.isfile(arg)):
      break
    endif
    index += 1
  endfor
  return index
enddef

##############################
#
# start of main program
#
##############################

# set default command line args
outfile = "none"
filter = "none"
filterParmNeeded = False
option = gNoOption
count = gDisplayAll
fileFilter = gNoFilter
functionFilter = gNoFilter
gDiffType = gValidDiffs[0]
deltaRequested = False

# validate usage and create profile
if ((len(sys.argv) < 2) or ((len(sys.argv)) == 2) and (sys.argv[1] == "-h")):
  showUsage()
else:
  firstFileArg = findFirstFileArg(sys.argv)
  if (firstFileArg < len(sys.argv)):
    for arg in sys.argv[1:firstFileArg]:
      if (arg in gValidOptions):
        option = arg
      else:
        tokens = arg.split("=")
        if (len(tokens) == 2):
          filter = tokens[0].strip()
          parm = tokens[1].strip()
          if (filter == "file"):
            fileFilter = parm
          elif (filter == "func"):
            functionFilter = parm
          elif (filter == "num"):
            count = parm
          elif (filter == "out"):
            outfile = parm
          elif (filter == "delta"):
            maxTimeDelta = parm
            deltaRequested = True
          elif ((filter == "diff") and (parm in gValidDiffs) and ((firstFileArg+2) == len(sys.argv))):
            gDiffType = parm
            gDiffRequested = True
          else:
            showUsage()
          endif
        else:
          showUsage()
        endif
      endif
    endfor
    if (gDiffRequested == True):
      # diff two profiles
      logfile1 = sys.argv[firstFileArg]
      logfile2 = sys.argv[firstFileArg+1]
      if ((createProfile(logfile1, gProfiles1)) and (createProfile(logfile2, gProfiles2))):
        diffProfiles(gProfiles1, gProfiles2)
        showProfile("Diff: %s->%s" % (logfile1, logfile2), outfile, option, count, fileFilter, functionFilter, gProfilesDiff)
      endif
    elif (deltaRequested == True):
      showDelta(sys.argv[firstFileArg], outfile, float(maxTimeDelta), count)
    else:
      # normal profile(s)
      for arg in sys.argv[firstFileArg:]:
        logfile = arg
        gProfiles1 = []
        if (createProfile(logfile, gProfiles1)):
          showProfile(logfile, outfile, option, count, fileFilter, functionFilter, gProfiles1)
        endif
      endfor
    endif
  else:
    showUsage()
  endif
endif
